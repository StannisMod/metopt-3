import api.Matrix;
import api.Method;
import api.Result;
import formats.PlainMatrix;
import formats.ProfileMatrix;
import api.Generator;
import generation.GilbertGenerator;
import generation.MainGenerator;
import methods.Gauss;
import methods.LUMethod;

import java.io.*;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Arrays;
import java.util.concurrent.ThreadLocalRandom;

public class Tester {

    private static PlainMatrix loadMatrix(BufferedReader reader) throws IOException {
        int n = Integer.parseInt(reader.readLine());
        PlainMatrix read = new PlainMatrix(n, n);
        for (int i = 0; i < n; i++) {
            String[] input = reader.readLine().split(" ");
            for (int j = 0; j < n; j++) {
                read.set(i, j, Double.parseDouble(input[j]));
            }
        }
        return read;
    }

    private static void check(int test, String method, String gen, Result solution) {
        double fault = solution.getFault();
        if (fault < 0.000001) {
            System.out.println(fault + "         | " + solution.actions + " | Passed: test " + test + ", solved with method " + method + " on matrix, generated by " + gen);
        } else {
            throw new AssertionError(fault + "         | " + solution.actions + " | Failed: test " + test + ", solved with method " + method + " on matrix, generated by " + gen);
        }
    }

    public static void runTest(int i, int n, Generator generator, Method method, boolean profile) {
        generator.generate(n, i);
        try (BufferedReader reader = Files.newBufferedReader(Path.of("matrix.out"))) {
            Matrix A = loadMatrix(reader);
            if (profile) {
                A = new ProfileMatrix(((PlainMatrix) A).getData());
            }
            double[] b = Arrays.stream(reader.readLine().split(" ")).mapToDouble(Double::parseDouble).toArray();
            Result solution = method.solve(A, b);
            check(i, method.getClass().getSimpleName(), generator.getClass().getSimpleName(), solution);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        Generator main = new MainGenerator();
        Generator gilbert = new GilbertGenerator();
        Method lu = new LUMethod();
        Method gauss = new Gauss();

        final int TESTS = 10;
        int counter = 0;
        int n = 50;//ThreadLocalRandom.current().nextInt(10, 100 + 1);
        int ng = ThreadLocalRandom.current().nextInt(3, 9);
        System.out.println("Running tests for n = " + n + ", ng = " + ng);
        try (BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream("tests.log")))) {
            for (int i = 0; i < TESTS; i++) {
                try {
                    runTest(i, n, main, gauss, false);
                    runTest(i, ng, gilbert, gauss, false);
                    try {
                        runTest(i, n, main, lu, true);
                    } catch (IllegalStateException e) {
                        throw new AssertionError("Test " + i + ": error while evaluating LU method on common-generated matrix: " + e.getMessage());
                    }
                    try {
                        runTest(i, ng, gilbert, lu, true);
                    } catch (IllegalStateException e) {
                        throw new AssertionError("Test " + i + ": error while evaluating LU method on Gilbert matrix: " + e.getMessage());
                    }
                    counter++;
                    System.out.println("Test " + i + " passed");
                } catch (AssertionError e) {
                    writer.write(e.getMessage());
                    writer.newLine();
                    System.out.println(e.getMessage());
                } catch (RuntimeException e) {
                    writer.write("Fatal error on test " + i + ":");
                    writer.write(e.toString());
                    writer.newLine();
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        System.out.println("--------------------------------------");
        System.out.println("Tests: " + counter + " passed, " + (TESTS - counter) + " failed");
    }
}
